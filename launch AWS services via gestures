import boto3
import cv2
import mediapipe as mp
import traceback

AWS_ACCESS_KEY = '*************'
AWS_SECRET_KEY = '*****************'
AWS_REGION = 'ap-south-1'
KEY_NAME = 'mykey123'  # Must match your EC2 Key Pair name

AMI_ID = 'ami-0a0f1259dd1c90938'  
INSTANCE_TYPE = 't2.micro'        

try:
    session = boto3.Session(
        aws_access_key_id=AWS_ACCESS_KEY,
        aws_secret_access_key=AWS_SECRET_KEY,
        region_name=AWS_REGION
    )

    # Verify credentials
    sts = session.client('sts')
    identity = sts.get_caller_identity()
    print(" AWS Identity:", identity)

except Exception as e:
    print(" AWS authentication failed:")
    traceback.print_exc()
    exit()

ec2 = session.resource("ec2", region_name=AWS_REGION)

def launch_ec2_instances(count):
    try:
        instances = ec2.create_instances(
            InstanceType=INSTANCE_TYPE,
            ImageId=AMI_ID,
            MinCount=count,
            MaxCount=count,
            KeyName=KEY_NAME
        )
        for idx, instance in enumerate(instances, start=1):
            print(f" Instance {idx} launched: ID = {instance.id}")
    except Exception as e:
        print("Failed to launch EC2 instances:")
        traceback.print_exc()

def start_hand_detection():
    mp_hands = mp.solutions.hands
    hands = mp_hands.Hands(static_image_mode=False,
                           max_num_hands=1,
                           min_detection_confidence=0.7,
                           min_tracking_confidence=0.5)
    mp_draw = mp.solutions.drawing_utils

    finger_tips = [8, 12, 16, 20]
    thumb_tip = 4

    cap = cv2.VideoCapture(0)
    launched = False  # To prevent multiple launches

    while True:
        success, img = cap.read()
        if not success:
            break

        img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        results = hands.process(img_rgb)
        finger_count = 0

        if results.multi_hand_landmarks:
            for hand_landmarks in results.multi_hand_landmarks:
                lm_list = []
                for id, lm in enumerate(hand_landmarks.landmark):
                    h, w, _ = img.shape
                    cx, cy = int(lm.x * w), int(lm.y * h)
                    lm_list.append((cx, cy))

                # Count fingers
                if lm_list:
                    # Thumb (more robust for vertical hand)
                    if lm_list[thumb_tip][0] > lm_list[thumb_tip - 1][0]:
                        finger_count += 1
                    for tip in finger_tips:
                        if lm_list[tip][1] < lm_list[tip - 2][1]:
                            finger_count += 1

                # Draw landmarks
                mp_draw.draw_landmarks(img, hand_landmarks, mp_hands.HAND_CONNECTIONS)

        # Show count on screen
        cv2.putText(img, f'Fingers: {finger_count}', (20, 50),
                    cv2.FONT_HERSHEY_SIMPLEX, 1.5, (0, 255, 0), 3)

        cv2.imshow("Hand Detection", img)

        # Launch EC2 instances only once and only if 1-5 fingers shown
        if finger_count > 0 and finger_count <= 5 and not launched:
            print(f"🖐️ Launching {finger_count} EC2 instance(s)...")
            launch_ec2_instances(finger_count)
            launched = True

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    start_hand_detection()
